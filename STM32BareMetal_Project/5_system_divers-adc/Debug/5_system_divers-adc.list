
5_system_divers-adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000454  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005ec  080005ec  000015f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005ec  080005f4  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ec  080005ec  000015ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f0  080005f0  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080005f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005f4  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010bf  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005f5  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00002cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e0  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee73  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002560  00000000  00000000  00011d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053d71  00000000  00000000  000142e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00068054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  00068098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000683b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005d4 	.word	0x080005d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080005d4 	.word	0x080005d4

080001d8 <pal_adc_init>:
#define CR2_CONT		(1U<<1)
#define CR2_SWSTART		(1U<<30)
#define SR_EOC			(1U<<1)


void pal_adc_init(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/**
	 * 配置 ADC GPIO 引脚
	 */
	// 1. 启用 GPIOA 的时钟访问
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <pal_adc_init+0x58>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a13      	ldr	r2, [pc, #76]	@ (8000230 <pal_adc_init+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. 将 PA1 模式设置为模拟模式
	GPIOA->MODER |=(1U<<2);
 80001e8:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <pal_adc_init+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	@ (8000234 <pal_adc_init+0x5c>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <pal_adc_init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <pal_adc_init+0x5c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6013      	str	r3, [r2, #0]

	/**
	 * 配置 ADC 模块
	 */
	// 1. 启用 ADC 模块的时钟访问
	RCC->APB2ENR |= ADC1EN;
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <pal_adc_init+0x58>)
 8000202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000204:	4a0a      	ldr	r2, [pc, #40]	@ (8000230 <pal_adc_init+0x58>)
 8000206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800020a:	6453      	str	r3, [r2, #68]	@ 0x44

	// 2. 设置转换序列开始
	ADC1->SQR3 = ADC_CH1;
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <pal_adc_init+0x60>)
 800020e:	2201      	movs	r2, #1
 8000210:	635a      	str	r2, [r3, #52]	@ 0x34

	// 3. 设置转换序列长度
	ADC1->SQR1 = AD_SEQ_LEN_1;
 8000212:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <pal_adc_init+0x60>)
 8000214:	2200      	movs	r2, #0
 8000216:	62da      	str	r2, [r3, #44]	@ 0x2c

	// 4. 启用 ADC 模块
	ADC1->CR2 |= CR2_ADCON;
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <pal_adc_init+0x60>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a06      	ldr	r2, [pc, #24]	@ (8000238 <pal_adc_init+0x60>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6093      	str	r3, [r2, #8]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40012000 	.word	0x40012000

0800023c <start_conversion>:


void start_conversion(void) {
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	// 启用连续转换
	ADC1->CR2 |= CR2_CONT;
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <start_conversion+0x28>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <start_conversion+0x28>)
 8000246:	f043 0302 	orr.w	r3, r3, #2
 800024a:	6093      	str	r3, [r2, #8]

	// 开始 AD 转换
	ADC1->CR2 |= CR2_SWSTART;
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <start_conversion+0x28>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <start_conversion+0x28>)
 8000252:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000256:	6093      	str	r3, [r2, #8]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40012000 	.word	0x40012000

08000268 <adc_read>:


uint32_t adc_read(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	// 等待转换完成
	while (!(ADC1->SR & SR_EOC)) {}
 800026c:	bf00      	nop
 800026e:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <adc_read+0x20>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 0302 	and.w	r3, r3, #2
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <adc_read+0x6>

	// 读取转换后的值
	return (ADC1->DR);
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <adc_read+0x20>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40012000 	.word	0x40012000

0800028c <led_init>:
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13



void led_init(void) {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	// 启用 GPIOA 的时钟访问
	RCC->AHB1ENR |= GPIOAEN;
 8000290:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <led_init+0x34>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000294:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <led_init+0x34>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6313      	str	r3, [r2, #48]	@ 0x30

	// 将 PA5 的模式设置为输出模式
	GPIOA->MODER |=(1U<<10);
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a08      	ldr	r2, [pc, #32]	@ (80002c4 <led_init+0x38>)
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <led_init+0x38>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <led_init+0x38>)
 80002ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020000 	.word	0x40020000

080002c8 <led_on>:

void led_on(void) {
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	// 将 PA5 设置为高电平
	GPIOA->ODR |=LED_PIN;
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <led_on+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <led_on+0x1c>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6153      	str	r3, [r2, #20]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40020000 	.word	0x40020000

080002e8 <button_init>:
	GPIOA->ODR &=~LED_PIN;
}



void button_init(void) {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	// 启用对 PORTC 的时钟访问
	RCC->AHB1ENR |= GPIOCEN;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <button_init+0x34>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f0:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <button_init+0x34>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6313      	str	r3, [r2, #48]	@ 0x30

	// 设置 PC13 为输入引脚
	GPIOC->MODER &=~(1U<<26);
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <button_init+0x38>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <button_init+0x38>)
 80002fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000302:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <button_init+0x38>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <button_init+0x38>)
 800030a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40020800 	.word	0x40020800

08000324 <get_btn_state>:

bool get_btn_state(void) {
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	// 检查按钮是否被按下（注：BTN 为低电平有效）
	if (GPIOC->IDR & BTN_PIN) {
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <get_btn_state+0x20>)
 800032a:	691b      	ldr	r3, [r3, #16]
 800032c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <get_btn_state+0x14>
		return false;
 8000334:	2300      	movs	r3, #0
 8000336:	e000      	b.n	800033a <get_btn_state+0x16>
	} else {
		return true;
 8000338:	2301      	movs	r3, #1
	}
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	40020800 	.word	0x40020800

08000348 <fpu_enable>:
#include "stm32f4xx.h"

void fpu_enable(void) {
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	// 启用浮点单元（Enable CP10 and CP11）
	SCB->CPACR |= (1<<20);
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <fpu_enable+0x50>)
 800034e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <fpu_enable+0x50>)
 8000354:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21);
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <fpu_enable+0x50>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000362:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <fpu_enable+0x50>)
 8000364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22);
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <fpu_enable+0x50>)
 800036e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000372:	4a09      	ldr	r2, [pc, #36]	@ (8000398 <fpu_enable+0x50>)
 8000374:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23);
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <fpu_enable+0x50>)
 800037e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000382:	4a05      	ldr	r2, [pc, #20]	@ (8000398 <fpu_enable+0x50>)
 8000384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <main>:
#define LED_PIN		PINS

bool btn_state;
uint32_t sensor_calue;

int main() {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

	// Enable FPU
	fpu_enable();
 80003a0:	f7ff ffd2 	bl	8000348 <fpu_enable>

	// 初始化调试 UART
	debug_uart_init();
 80003a4:	f000 f856 	bl	8000454 <debug_uart_init>

	// 初始化时间基准函数
	timebase_init();
 80003a8:	f000 f82a 	bl	8000400 <timebase_init>

	// 初始化 LED
	led_init();
 80003ac:	f7ff ff6e 	bl	800028c <led_init>

	// 初始化按钮
	button_init();
 80003b0:	f7ff ff9a 	bl	80002e8 <button_init>

	// 初始化 ADC
	pal_adc_init();
 80003b4:	f7ff ff10 	bl	80001d8 <pal_adc_init>

	// 开始转换
	start_conversion();
 80003b8:	f7ff ff40 	bl	800023c <start_conversion>


	while (1) {
		led_on();
 80003bc:	f7ff ff84 	bl	80002c8 <led_on>
		btn_state = get_btn_state();
 80003c0:	f7ff ffb0 	bl	8000324 <get_btn_state>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <main+0x40>)
 80003ca:	701a      	strb	r2, [r3, #0]

		sensor_calue = adc_read();
 80003cc:	f7ff ff4c 	bl	8000268 <adc_read>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4a03      	ldr	r2, [pc, #12]	@ (80003e0 <main+0x44>)
 80003d4:	6013      	str	r3, [r2, #0]
		led_on();
 80003d6:	bf00      	nop
 80003d8:	e7f0      	b.n	80003bc <main+0x20>
 80003da:	bf00      	nop
 80003dc:	2000001c 	.word	0x2000001c
 80003e0:	20000020 	.word	0x20000020

080003e4 <tick_increment>:

	return g_curr_tick_p;
}


static void tick_increment(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80003e8:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <tick_increment+0x18>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	4a03      	ldr	r2, [pc, #12]	@ (80003fc <tick_increment+0x18>)
 80003f0:	6013      	str	r3, [r2, #0]
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	20000024 	.word	0x20000024

08000400 <timebase_init>:


/**
 * 时间基准初始化函数
 * */
void timebase_init(void) {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop

	// 1. 禁用全局中断
	__disable_irq();

	// 2. 用每秒的时钟周期数来加载计时器
	SysTick->LOAD = ONE_SEC_LOAD - 1;
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <timebase_init+0x40>)
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <timebase_init+0x44>)
 800040c:	605a      	str	r2, [r3, #4]

	// 3. 清除 systick 当前值寄存器
	SysTick->VAL = 0;
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <timebase_init+0x40>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]

	// 4. 选择内部时钟源
	SysTick->CTRL = CTRL_CLCKSRC;
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <timebase_init+0x40>)
 8000416:	2204      	movs	r2, #4
 8000418:	601a      	str	r2, [r3, #0]

	// 5. 启用中断
	SysTick->CTRL |= CTRL_TICKINT;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <timebase_init+0x40>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <timebase_init+0x40>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	6013      	str	r3, [r2, #0]

	// 6. 启用 systick
	SysTick->CTRL |= CTRL_ENABLE;
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <timebase_init+0x40>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <timebase_init+0x40>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000432:	b662      	cpsie	i
}
 8000434:	bf00      	nop

	// 7. 启用全局中断
	__enable_irq();
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000e010 	.word	0xe000e010
 8000444:	00f423ff 	.word	0x00f423ff

08000448 <SysTick_Handler>:



void SysTick_Handler(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	tick_increment();
 800044c:	f7ff ffca 	bl	80003e4 <tick_increment>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}

08000454 <debug_uart_init>:
	uart_write(ch);
	return ch;
}


void debug_uart_init(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	/**
	 * GPIO 引脚的配置
	 * */
	// 1. 启用对 GPIOA 的时钟访问
	RCC->AHB1ENR |= GPIOAEN;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <debug_uart_init+0x84>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045c:	4a1e      	ldr	r2, [pc, #120]	@ (80004d8 <debug_uart_init+0x84>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. 将 PA2 模式设置为替代功能模式
	GPIOA->MODER &=~(1U<<4);
 8000464:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <debug_uart_init+0x88>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a1c      	ldr	r2, [pc, #112]	@ (80004dc <debug_uart_init+0x88>)
 800046a:	f023 0310 	bic.w	r3, r3, #16
 800046e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000470:	4b1a      	ldr	r3, [pc, #104]	@ (80004dc <debug_uart_init+0x88>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a19      	ldr	r2, [pc, #100]	@ (80004dc <debug_uart_init+0x88>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6013      	str	r3, [r2, #0]

	// 3. 设置替代功能类型 AF07 (UART2_TX)
	GPIOA->AFR[0] |=(1U<<8);
 800047c:	4b17      	ldr	r3, [pc, #92]	@ (80004dc <debug_uart_init+0x88>)
 800047e:	6a1b      	ldr	r3, [r3, #32]
 8000480:	4a16      	ldr	r2, [pc, #88]	@ (80004dc <debug_uart_init+0x88>)
 8000482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000486:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <debug_uart_init+0x88>)
 800048a:	6a1b      	ldr	r3, [r3, #32]
 800048c:	4a13      	ldr	r2, [pc, #76]	@ (80004dc <debug_uart_init+0x88>)
 800048e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000492:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <debug_uart_init+0x88>)
 8000496:	6a1b      	ldr	r3, [r3, #32]
 8000498:	4a10      	ldr	r2, [pc, #64]	@ (80004dc <debug_uart_init+0x88>)
 800049a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800049e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <debug_uart_init+0x88>)
 80004a2:	6a1b      	ldr	r3, [r3, #32]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <debug_uart_init+0x88>)
 80004a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004aa:	6213      	str	r3, [r2, #32]

	/**
	 * UART 的配置
	 * */
	// 1. 启用对 UART2 的时钟访问
	RCC->APB1ENR |= UART2EN;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <debug_uart_init+0x84>)
 80004ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b0:	4a09      	ldr	r2, [pc, #36]	@ (80004d8 <debug_uart_init+0x84>)
 80004b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004b6:	6413      	str	r3, [r2, #64]	@ 0x40

	// 2. 配置 UART 的波特率
	uart_set_baudrate(APB1_CLK, DBG_UART_BAUDRATE);
 80004b8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80004bc:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <debug_uart_init+0x8c>)
 80004be:	f000 f827 	bl	8000510 <uart_set_baudrate>

	// 3. 配置传输方向
	USART2->CR1 = CR1_TE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <debug_uart_init+0x90>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	60da      	str	r2, [r3, #12]

	// 4. 启用 UART 模块
	USART2->CR1 |= CR1_UE;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <debug_uart_init+0x90>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <debug_uart_init+0x90>)
 80004ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004d2:	60d3      	str	r3, [r2, #12]
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020000 	.word	0x40020000
 80004e0:	00f42400 	.word	0x00f42400
 80004e4:	40004400 	.word	0x40004400

080004e8 <compute_uart_bd>:
	// 写入数据寄存器
	USART2->DR = (ch & 0xFF);
}


static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate / 2U)) / baudrate);
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	085a      	lsrs	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	441a      	add	r2, r3
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	b29b      	uxth	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk, baudrate);
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ffe3 	bl	80004e8 <compute_uart_bd>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <uart_set_baudrate+0x24>)
 8000528:	609a      	str	r2, [r3, #8]
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40004400 	.word	0x40004400

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	@ (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	@ (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	@ (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 f811 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800056a:	f7ff ff17 	bl	800039c <main>

0800056e <LoopForever>:

LoopForever:
  b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800057c:	080005f4 	.word	0x080005f4
  ldr r2, =_sbss
 8000580:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000584:	20000028 	.word	0x20000028

08000588 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC_IRQHandler>
	...

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4d0d      	ldr	r5, [pc, #52]	@ (80005c4 <__libc_init_array+0x38>)
 8000590:	4c0d      	ldr	r4, [pc, #52]	@ (80005c8 <__libc_init_array+0x3c>)
 8000592:	1b64      	subs	r4, r4, r5
 8000594:	10a4      	asrs	r4, r4, #2
 8000596:	2600      	movs	r6, #0
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	4d0b      	ldr	r5, [pc, #44]	@ (80005cc <__libc_init_array+0x40>)
 800059e:	4c0c      	ldr	r4, [pc, #48]	@ (80005d0 <__libc_init_array+0x44>)
 80005a0:	f000 f818 	bl	80005d4 <_init>
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	2600      	movs	r6, #0
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
