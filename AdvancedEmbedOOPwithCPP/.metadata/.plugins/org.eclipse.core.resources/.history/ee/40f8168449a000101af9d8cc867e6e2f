
cpp_2_calss_gpio_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005c8  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000379  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de5e  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c0b  00000000  00000000  0000fc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050264  00000000  00000000  000108a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000134  00000000  00000000  00060b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00060c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003cc 	.word	0x080003cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003cc 	.word	0x080003cc

080001d8 <_ZN4GPIOC1EP12GPIO_TypeDefhb>:
#include "GPIO.hpp"


// 构造函数

GPIO::GPIO(GPIO_TypeDef * gpioPort, uint8_t gpioPin, bool isOutput): port(gpioPort), pin(gpioPin) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	4611      	mov	r1, r2
 80001e4:	461a      	mov	r2, r3
 80001e6:	460b      	mov	r3, r1
 80001e8:	71fb      	strb	r3, [r7, #7]
 80001ea:	4613      	mov	r3, r2
 80001ec:	71bb      	strb	r3, [r7, #6]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	711a      	strb	r2, [r3, #4]
	// 启用 GPIO 的时钟访问
	if (gpioPort == GPIOA) RCC->AHB1ENR |= (1U<<0);
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	4a1f      	ldr	r2, [pc, #124]	@ (800027c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d105      	bne.n	800020e <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x36>
 8000202:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000206:	4a1e      	ldr	r2, [pc, #120]	@ (8000280 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	@ 0x30
	if (gpioPort == GPIOC) RCC->AHB1ENR |= (1U<<2);
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	4a1c      	ldr	r2, [pc, #112]	@ (8000284 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xac>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d105      	bne.n	8000222 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x4a>
 8000216:	4b1a      	ldr	r3, [pc, #104]	@ (8000280 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021a:	4a19      	ldr	r2, [pc, #100]	@ (8000280 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	6313      	str	r3, [r2, #48]	@ 0x30
	// ......

	// 配置引脚
	if (isOutput) {
 8000222:	79bb      	ldrb	r3, [r7, #6]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d016      	beq.n	8000256 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x7e>
		gpioPort->MODER |= (1 << (2 * gpioPin));
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	79fa      	ldrb	r2, [r7, #7]
 800022e:	0052      	lsls	r2, r2, #1
 8000230:	2101      	movs	r1, #1
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	431a      	orrs	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	601a      	str	r2, [r3, #0]
		gpioPort->MODER &= ~(1 << (2 * gpioPin + 1));
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	0052      	lsls	r2, r2, #1
 8000244:	3201      	adds	r2, #1
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	43d2      	mvns	r2, r2
 800024e:	401a      	ands	r2, r3
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	e00a      	b.n	800026c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x94>
	} else {
		gpioPort->MODER &= ~(3 << (2 * gpioPin));
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	2103      	movs	r1, #3
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	43d2      	mvns	r2, r2
 8000266:	401a      	ands	r2, r3
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	601a      	str	r2, [r3, #0]
	}
}
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	4618      	mov	r0, r3
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000
 8000280:	40023800 	.word	0x40023800
 8000284:	40020800 	.word	0x40020800

08000288 <_ZN4GPIO6toggleEv>:


// 切换引脚状态
void GPIO::toggle() {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	port->ODR ^= (1U << pin);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	6959      	ldr	r1, [r3, #20]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	791b      	ldrb	r3, [r3, #4]
 800029a:	461a      	mov	r2, r3
 800029c:	2301      	movs	r3, #1
 800029e:	fa03 f202 	lsl.w	r2, r3, r2
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	404a      	eors	r2, r1
 80002a8:	615a      	str	r2, [r3, #20]
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <_ZN4GPIO4readEv>:
void GPIO::setHigh() {
	port->ODR |= (1U << pin);
}

// 读取引脚状态
bool GPIO::read() {
 80002b6:	b480      	push	{r7}
 80002b8:	b083      	sub	sp, #12
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
	return (port->IDR & (1U << pin));
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	691a      	ldr	r2, [r3, #16]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	4619      	mov	r1, r3
 80002ca:	2301      	movs	r3, #1
 80002cc:	408b      	lsls	r3, r1
 80002ce:	4013      	ands	r3, r2
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	bf14      	ite	ne
 80002d4:	2301      	movne	r3, #1
 80002d6:	2300      	moveq	r3, #0
 80002d8:	b2db      	uxtb	r3, r3
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <main>:
#include "GPIO.hpp"


int main() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	// 将 PA5 设置为输出引脚
	GPIO led(GPIOA, 5, true);
 80002ee:	f107 0008 	add.w	r0, r7, #8
 80002f2:	2301      	movs	r3, #1
 80002f4:	2205      	movs	r2, #5
 80002f6:	490c      	ldr	r1, [pc, #48]	@ (8000328 <main+0x40>)
 80002f8:	f7ff ff6e 	bl	80001d8 <_ZN4GPIOC1EP12GPIO_TypeDefhb>

	// 将 PC13 设置为输入引脚
	GPIO button(GPIOC, 13, false);
 80002fc:	4638      	mov	r0, r7
 80002fe:	2300      	movs	r3, #0
 8000300:	220d      	movs	r2, #13
 8000302:	490a      	ldr	r1, [pc, #40]	@ (800032c <main+0x44>)
 8000304:	f7ff ff68 	bl	80001d8 <_ZN4GPIOC1EP12GPIO_TypeDefhb>

	while (1) {
		if (!button.read()) {
 8000308:	463b      	mov	r3, r7
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ffd3 	bl	80002b6 <_ZN4GPIO4readEv>
 8000310:	4603      	mov	r3, r0
 8000312:	f083 0301 	eor.w	r3, r3, #1
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f5      	beq.n	8000308 <main+0x20>
			led.toggle();
 800031c:	f107 0308 	add.w	r3, r7, #8
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffb1 	bl	8000288 <_ZN4GPIO6toggleEv>
		if (!button.read()) {
 8000326:	e7ef      	b.n	8000308 <main+0x20>
 8000328:	40020000 	.word	0x40020000
 800032c:	40020800 	.word	0x40020800

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000362:	f7ff ffc1 	bl	80002e8 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	@ (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
