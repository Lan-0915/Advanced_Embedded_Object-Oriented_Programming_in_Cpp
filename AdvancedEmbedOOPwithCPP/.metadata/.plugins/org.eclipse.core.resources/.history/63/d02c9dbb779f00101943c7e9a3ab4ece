#ifndef __SPI_H__
#define __SPI_H__

#include "stm32f4xx.h"
#include <stdint.h>


typedef struct {
	uint32_t Mode;
	uint32_t Direction;
	uint32_t DataSize;
	uint32_t CLKPolarity;
	uint32_t CLKPhase;
	uint32_t NSS;
	uint32_t BuadRatePrescaler;
	uint32_t FirstBit;
	uint32_t TINode;
	uint32_t CRCCalculation;
}SPI_InitTypeDef;


typedef enum {
	SPI_STATE_RESET   = 0x00U,
	SPI_STATE_READY   = 0x01U,
	SPI_STATE_BUSY    = 0x02U,
	SPI_STATE_BUSY_TX = 0x03U,
	SPI_STATE_BUSY_RX = 0x04U,
}SPI_StateTypeDef;

typedef enum {
	DEV_OK      = 0x00U,
	DEV_ERROR   = 0x01U,
	DEV_BUSY    = 0x02U,
	DEV_TIMEOUT = 0x03U,
}StatusTypeDef;



typedef struct {
	SPI_InitTypeDef 	Init;
	uint8_t 			*pTxBuffPtr;
	uint16_t			TxXferSize;
	__IO uint16_t		TxXferCount;
	uint8_t 			*pRxBuffPtr;
	uint16_t			RxXferSize;
	__IO uint16_t		RxXferCount;
	SPI_StateTypeDef	State;
	__IO uint32_t		Errorcode;
}SPI_HandleTypeDef;



#define SPI_ERROR_NONE		(0x00000000U)


#endif
