Advanced Embedded Object-Oriented Programming in C++

1 - Introduction
	1 -Welcome(Same as Promo)
	2 -IMPORTANT About the Generic Drivers Section

2 - Introduction to Embedded Object-Oriented Programming (OOP) in C++
	1 -Object-Oriented Programming in Large Scale Embedded Firmware Projects
	2 -Misconceptions About OOP Overhead in Microcontrollers
	3 -When to Use Object-Oriented Programming
	4 -When to Use Procedural Programming
	5 -How C++ Features Impact Flash, RAM and Execution Speed

3 - Microcontroller Constraints & Object-Oriented Programming Optimization
	1 -Why Dynamic Memory Allocation is Discrouraged
	2 -Why Transition from Procedural C to Object-Oriented Programming

4 - Setting Up
	1 -Downloading CubeIDE
	2 -Installing CubeIDE
	3 -Getting the required documentation
	4 -Getting the required package for bare-metal development
	5 -Testing the project setup

5 - Developing Some Generic Drivers for Running Examples
	1 -Programming  Enabling the Floating Point Unit (FPU)
	2 -Programming  Developing a UART Driver - Analyzing the Documentation
	3 -Programming  Developing a UART Driver - Listing out the steps
	4 -Programming  Developing a UART Driver - Implementing the Init. function
	5 -Programming  Developing a UART Driver - Implementing the Write function
	6 -Programming  Developing a UART Driver - Testing the Driver
	7 -Programming  Developing the System Timebase - Analyzing the Documentation
	8 -Programming  Developing the System Timebase - Implementing the Init. function
	9 -Programming  Developing the System Timebase - The rest of the functions
	10 -Programming  Developing the System Timebase - Testing the Timebase
	11 -Programming  BSP  Listing the out the Required Functions
	12 -Programming  Writing the LED Driver
	13 -Programming  Writing the PushButton Driver
	14 -Programming  Testing the Board Support Package
	15 -Programming  ADC- Analyzing the Documentation
	16 -Programming  Listing out the steps for developing the ADC Driver
	17 -Programming  Writing the ADC Initialization function
	18 -Programming  Writing the ADC Read function
	19 -Programming  Analyzing the Documentation for the SPI Driver
	20 -Programming  Intializing the GPIO Pins for SPI
	21 -Programming  Implementaing Structures for Configruation Parameters
	22 -Programming  Configuring the Parameters
	23 -Programming  Writing the SPI Initialization function
	24 -Programming  Writing the SPI Transmit Function (Pt.1)
	25 -Programming  Writing the SPI Transmit Function (Pt.2)
	26 -Programming  Transmitting 16-bit Data
	27 -Programming  Transmitting 8-bit Data
	28 -Programming  Receiving Data
	29 -Programming  Testing the SPI Driver
	30 -Programming  Analyzing the Documentation for the I2C Driver
	31 -Programming  I2C  The GPIO Initialization
	32 -Programming  Configuring the I2C Parameters
	33 -Programming  Implementing the I2C Read function
	34 -Programming  Implementing the I2C Burst Read function
	35 -Programming  Implementing the I2C Write functions

6 - Transitioning from Procedural C to OOP in Embedded Firmware
	1 -Principles for Refactoring Embedded C Code to Embedded C++

7 - Developing Peripheral Drivers Using C++ Classes
	1 -Basic Structure of a Peripheral Driver Class
	2 -Understanding Constructor and Destructor Based Resource Management
	3 -Encapsulating with Getter and Setter Methods
	4 -Why Direct Memory Access Needs Encapsulation
	5 -Understanding RAII (Resource Acquisition Is Initialization)

8 - Developing the GPIO C++ Class Driver
	1 -Programming Updating the Workspace
	2 -Programming Configuring the Project Paths for C++ Development
	3 -Programming Implementing the Private Members of the Class
	4 -Programming Implementing the Class Constructor
	5 -Programming Implementing the Pin Control Methods
	6 -Programming Testing the GPIO Class
	7 -Programming Having Separate Interface and Implementation Files

9 - Developing the UART C++ Class Driver
	1 -Programming Implementing the Private Members
	2 -Programming Implementing the Class Constructor
	3 -Programming Implementing the Public Methods
	4 -Programming Testing the UART Class

10 - Developing the FPU C++ Class Driver
	1 -Programming Implementing the FPU Class Driver

11 - Developing the SysTick Timer C++ Class Driver
	1 -Programming Implementing the Interface File
	2 -Programming Implementing the SysTick Class Driver

12 - Developing the ADC C++ Class Driver
	1 -Programming Implementing the Private Members
	2 -Programming Implementing the Class Constructor
	3 -Programming; Implementing the Initialization Method
	4 -Programming Implementing the ADC Read Method
	5 -Programming Testing the ADC Class

13 - Developing the SPI and Accelerometer C++ Class Drivers
	1 -Programming Analyzing the SPI Embedded-C Driver
	2 -Programming Analyzing the ADXL345 Embedded-C Driver
	3 -Programming Implementing the Interface File
	4 -Programming Implementing the SPI Class Constructor
	5 -Programming Implementing the Other Private Methods
	6 -Programming Implementing the Transmit Method
	7 -Programming Implementing the Receive and Chip Select Methods
	8 -Programming Implementing the ADXL345 Class- Private Members
	9 -Programming Implementing the ADXL345 Class- Public Members
	10 -Programming Implementing the Class Constructor
	11 -Programming Implementing the writeRegister( ) Method
	12 -Programming Implementing the readRegister( ) Method
	13 -Programming Implementing the ADXL345 Initialization Method
	14 -Programming Implementing the updateAccleration( ) Method
	15 -Programming Implementing the Methods for Returning Acceleration Data

14 - Operator Overloading for Hardware Interaction in Embedded Systems
	1 -Programming Listing out the Operators
	2 -Programming Defining the Method Prototypes
	3 -Programming Implementing the Methods(Pt.1)
	4 -Programming Implementing the Methods(Pt.2)
	5 -Programming Testing the GPIO Operator Implementation

